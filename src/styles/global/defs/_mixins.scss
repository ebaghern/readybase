@import '../util/breakpoints';

/// Removes the focus ring around an element when a mouse input is detected.
@mixin disable-mouse-outline {
  [data-whatinput='mouse'] & {
    outline: 0;
  }
}

/// Visually hide text.
@mixin srt {
  // sass-lint:disable-block no-important
  position: absolute !important;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  word-wrap: normal !important;
}

/// Clearfix.
@mixin clearfix {
  &:before,
  &:after {
    display: table;
    content: ' ';
  }

  &:after {
    clear: both;
  }
}

@mixin text-smoothing {
  -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes
  -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes
}

@mixin text-unlink {
  color: inherit;

  &:link,
  &:hover,
  &:focus,
  &:visited {
    border-bottom: none;
    text-decoration: none;
  }
}

@mixin text-xxxl {
  font-size: rem(26);
  @include breakpoint(medium) {
    font-size: rem(42);
  }
}

@mixin text-xxl {
  font-size: rem(24);
  @include breakpoint(medium) {
    font-size: rem(30);
  }
  @include breakpoint(large) {
    font-size: rem(36);
  }
}

@mixin text-xl {
  font-size: rem(20);
  @include breakpoint(medium) {
    font-size: rem(30);
  }
}

@mixin text-lg {
  font-size: rem(17);
  @include breakpoint(medium) {
    font-size: rem(24);
  }
}

@mixin text-std-lg {
  font-size: rem(16);
  @include breakpoint(medium) {
    font-size: rem(18);
  }
}

@mixin text-std {
  font-size: rem(14);
  @include breakpoint(medium) {
    font-size: rem(16);
  }
}

@mixin text-sm {
  font-size: rem(14);
}

@mixin text-xs {
  font-size: rem(12);
}

@mixin font-heading {
  line-height: $heading-line-height;
}

// Buttons styling
@mixin button-reset {
  padding: 0;
  border: none;
  background-color: transparent;
  color: inherit;
  font: inherit;
  cursor: pointer;

  &:hover {
    color: inherit;
    text-decoration: none;
  }
}

@mixin button-base {
  @include disable-mouse-outline;
  display: inline-block;
  max-width: 100%;
  margin: $button-margin;

  @if (type-of($button-padding) == 'map') {
    @each $size, $padding in $button-padding {
      @include breakpoint($size) {
        padding: $padding;
      }
    }
  } @else {
    padding: $button-padding;
  }

  transition: $button-transition;
  border: $button-border;
  border-radius: rem(999);
  font-family: $font-family;
  font-size: map-get($button-sizes, small);
  font-weight: $font-weight-bold;
  line-height: 1;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;
  vertical-align: middle;
  appearance: none;

  @include breakpoint(medium) {
    font-size: map-get($button-sizes, default);
  }
}

/// Expands a button to make it full-width.
/// @param {Boolean} $expand [true] - Set to `true` to enable the expand behavior. Set to `false` to reverse this behavior.
@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    width: 100%;
    margin-right: 0;
    margin-left: 0;
  } @else {
    display: inline-block;
    width: auto;
    margin: $button-margin;
  }
}

/// Sets the base styles of a hollow or clear button filling according to `$fill`.
/// See mixin `button-fill-style` for the filling styles.
/// @param {Keyword} $fill [$button-fill] - Type of filling between `hollow` and `solid`.
@mixin button-fill(
  $fill: $button-fill
) {
  @if $fill == hollow {
    @include button-hollow;
  }
}

/// Sets the visual styles of a solid/hollow/clear button filling according to `$fill`.
/// See mixins `button-style` and `button-hollow-style` for effects of visual styling parameters.
/// @param {Keyword} $fill [$button-fill] - Type of filling between `hollow` and `clear`.
/// @param {Color} $background [$button-background] - -
/// @param {Color} $background-hover [$button-background-hover] - -
/// @param {Color} $color [$button-color] - -
@mixin button-fill-style(
  $fill: $button-fill,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color
) {
  @if $fill == solid {
    @include button-style($background, $background-hover, $color);
  } @else if $fill == hollow {
    @include button-hollow-style($background);
  }
}

/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness
) {
  @if $color == auto {
    $color: color-pick-contrast($background, ($button-color, $button-color-alt));
  }

  @if $background-hover == auto {
    $background-hover: scale-color($background, $lightness: $background-hover-lightness);
  }

  // Default and disabled states
  &,
  &.disabled,
  &[disabled],
  &.disabled:hover,
  &[disabled]:hover,
  &.disabled:focus,
  &[disabled]:focus {
    background-color: $background;
    color: $color;
  }

  &:hover,
  &:focus {
    background-color: $background-hover;
    color: $color;
  }
}

/// Sets the base styles of a hollow button.
/// See mixin `button-hollow-style` for the filling styles.
@mixin button-hollow {
  &,
  &.disabled,
  &[disabled] {
    &,
    &:hover,
    &:focus {
      background-color: transparent;
    }
  }
}

/// Sets the visual style of a hollow button.
/// @param {Color} $color [$button-background] - Text and border color of the button.
/// @param {Color} $hover-lightness [$button-hollow-hover-lightness] - Color lightness on hover.
/// @param {Color} $border-width [$button-hollow-border-width] - Border width of the button.
@mixin button-hollow-style(
  $color: $button-background,
  $hover-lightness: $button-hollow-hover-lightness,
  $border-width: $button-hollow-border-width
) {
  $color-hover: scale-color($color, $lightness: $hover-lightness);

  // Default and disabled states
  &,
  &.disabled,
  &[disabled],
  &.disabled:hover,
  &[disabled]:hover,
  &.disabled:focus,
  &[disabled]:focus {
    border: $border-width solid $color;
    color: $color;
  }

  &:hover,
  &:focus {
    border-color: $color-hover;
    color: $color-hover;
  }
}

/// Adds disabled styles to a button by fading the element and reseting the cursor.
/// @param {Number} $opacity [$button-opacity-disabled] - Opacity of the disabled button.
@mixin button-disabled(
  $opacity: $button-opacity-disabled
) {
  cursor: not-allowed;
  opacity: $button-opacity-disabled;
}

/// Adds all styles for a button. For more granular control over styles, use the individual button mixins.
/// @param {Boolean} $expand [false] - Set to `true` to make the button full-width.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
/// @param {Keyword} $style [solid] - Set to `hollow` to create a hollow button. The color defined in `$background` will be used as the primary color of the button.
@mixin button(
  $expand: false,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $style: $button-fill
) {
  @include button-base;
  @include button-fill($style);
  @include button-fill-style($style, $background, $background-hover, $color);

  @if $expand {
    @include button-expand;
  }
}

@mixin make-button {

  @include button($style: none);

  // Sizes
  @each $size, $value in map-remove($button-sizes, default) {
    &--#{$size} {
      font-size: $value;
    }
  }

  &--expanded {
    @include button-expand;
  }

  // Solid, hollow & clear styles
  @each $filling in (solid hollow) {
    $selector: if($button-fill == $filling, null, $filling);

    &--#{$selector} {
      @include button-fill($filling);
      @include button-fill-style($filling);

      @each $name, $color in $button-palette {
        &--#{$name} {
          @include button-fill-style($filling, $color, auto, auto);
        }
      }
    }
  }

  // Disabled state
  &--disabled,
  &[disabled] {
    @include button-disabled;
  }
}

// Center block elements.
@mixin block-center {
  margin-right: auto;
  margin-left: auto;
}

// Add consistent margins/padding to sections.
@mixin make-section {
  @include block-center;
  max-width: $container-width;
  padding: rem(20) $margin-small;
  @include breakpoint(medium) {
    padding: rem(50) $margin-large;
  }
}

@mixin remove-inner-vertical-margins {
  > *:first-child {
    margin-top: 0;
  }
  > *:last-child {
    margin-bottom: 0;
  }
}
